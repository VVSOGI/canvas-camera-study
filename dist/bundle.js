/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
var canvas = document.getElementById("canvas");
var view = document.getElementById("view");
var ctx = canvas.getContext("2d", {
  willReadFrequently: true
});
var viewCtx = view.getContext("2d");
// ctx.scale(0.5, 0.5);
var video = document.getElementById("video");
var viewpt = document.getElementById("viewpt");
ctx.beginPath();
viewpt.onloadeddata = function () {
  window.viewpt = viewpt;
  viewpt.autoplay = true;
};
video.onloadeddata = function () {
  var black = [122, 122, 122, 255];
  var ratio = 200;
  var width = 1440;
  var height = 720;
  requestAnimationFrame(function () {
    return render(video, width, height, ratio, black);
  });
  canvas.width = width + ratio * 4;
  canvas.height = height + ratio * 2;
  view.width = canvas.width;
  view.height = canvas.height;
  viewCtx.fillRect(0, 0, view.width, view.height);
  var stream = canvas.captureStream(60);
  var makeVideo = document.createElement("video");
  makeVideo.srcObject = stream;
  makeVideo.autoplay = true;
  makeVideo.setAttribute("id", "maked-video");
  // document.body.appendChild(makeVideo);
};

function render(video, videoWidth, videoHeight, ratio, coveredColor) {
  ctx.drawImage(video, 0, 0, videoWidth, videoHeight);
  var left = ctx.getImageData(0, 0, videoWidth / 2, videoHeight);
  var right = ctx.getImageData(videoWidth / 2, 0, videoWidth / 2, videoHeight);
  viewCtx.putImageData(right, canvas.width / 2 + ratio, ratio);
  viewCtx.putImageData(left, ratio, ratio);
  ctx.moveTo(videoWidth / 2, 0);
  ctx.lineTo(videoWidth / 2, 0);
  ctx.lineTo(videoWidth / 2, videoHeight);
  requestAnimationFrame(function () {
    return render(video, videoWidth, videoHeight, ratio, coveredColor);
  });
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsQ0FBQyxHQUFHRCxLQUFLLEVBQUVBLEtBQUssQ0FBQztFQUM1RFIsT0FBTyxDQUFDMkIsWUFBWSxDQUFDSCxJQUFJLEVBQUVoQixLQUFLLEVBQUVBLEtBQUssQ0FBQztFQUV4Q1gsR0FBRyxDQUFDK0IsTUFBTSxDQUFDUixVQUFVLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUM3QnZCLEdBQUcsQ0FBQ2dDLE1BQU0sQ0FBQ1QsVUFBVSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDN0J2QixHQUFHLENBQUNnQyxNQUFNLENBQUNULFVBQVUsR0FBRyxDQUFDLEVBQUVDLFdBQVcsQ0FBQztFQUV2Q1YscUJBQXFCLENBQUM7SUFDcEIsYUFBTSxDQUFDVixLQUFLLEVBQUVtQixVQUFVLEVBQUVDLFdBQVcsRUFBRWIsS0FBSyxFQUFFYyxZQUFZLENBQUM7RUFBM0QsQ0FBMkQsQ0FDNUQ7QUFDSCxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FudmFzLy4vc3JjL2FwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbmNvbnN0IHZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZXdcIikgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG5cbmNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiwge1xuICB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUsXG59KTtcbmNvbnN0IHZpZXdDdHggPSB2aWV3LmdldENvbnRleHQoXCIyZFwiKTtcblxuLy8gY3R4LnNjYWxlKDAuNSwgMC41KTtcbmNvbnN0IHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlb1wiKSBhcyBIVE1MVmlkZW9FbGVtZW50O1xuY29uc3Qgdmlld3B0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWV3cHRcIikgYXMgSFRNTFZpZGVvRWxlbWVudDtcblxuY3R4LmJlZ2luUGF0aCgpO1xuXG52aWV3cHQub25sb2FkZWRkYXRhID0gKCkgPT4ge1xuICAod2luZG93IGFzIGFueSkudmlld3B0ID0gdmlld3B0O1xuICB2aWV3cHQuYXV0b3BsYXkgPSB0cnVlO1xufTtcblxudmlkZW8ub25sb2FkZWRkYXRhID0gKCkgPT4ge1xuICBjb25zdCBibGFjayA9IFsxMjIsIDEyMiwgMTIyLCAyNTVdO1xuICBjb25zdCByYXRpbyA9IDIwMDtcbiAgY29uc3Qgd2lkdGggPSAxNDQwO1xuICBjb25zdCBoZWlnaHQgPSA3MjA7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiByZW5kZXIodmlkZW8sIHdpZHRoLCBoZWlnaHQsIHJhdGlvLCBibGFjaykpO1xuICBjYW52YXMud2lkdGggPSB3aWR0aCArIHJhdGlvICogNDtcbiAgY2FudmFzLmhlaWdodCA9IGhlaWdodCArIHJhdGlvICogMjtcbiAgdmlldy53aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgdmlldy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xuICB2aWV3Q3R4LmZpbGxSZWN0KDAsIDAsIHZpZXcud2lkdGgsIHZpZXcuaGVpZ2h0KTtcblxuICBjb25zdCBzdHJlYW0gPSBjYW52YXMuY2FwdHVyZVN0cmVhbSg2MCk7XG5cbiAgY29uc3QgbWFrZVZpZGVvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICBcInZpZGVvXCJcbiAgKSBhcyBIVE1MRWxlbWVudCBhcyBIVE1MVmlkZW9FbGVtZW50O1xuXG4gIG1ha2VWaWRlby5zcmNPYmplY3QgPSBzdHJlYW07XG4gIG1ha2VWaWRlby5hdXRvcGxheSA9IHRydWU7XG4gIG1ha2VWaWRlby5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBcIm1ha2VkLXZpZGVvXCIpO1xuXG4gIC8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobWFrZVZpZGVvKTtcbn07XG5cbmZ1bmN0aW9uIHJlbmRlcihcbiAgdmlkZW86IEhUTUxWaWRlb0VsZW1lbnQsXG4gIHZpZGVvV2lkdGg6IG51bWJlcixcbiAgdmlkZW9IZWlnaHQ6IG51bWJlcixcbiAgcmF0aW86IG51bWJlcixcbiAgY292ZXJlZENvbG9yOiBudW1iZXJbXVxuKSB7XG4gIGN0eC5kcmF3SW1hZ2UodmlkZW8sIDAsIDAsIHZpZGVvV2lkdGgsIHZpZGVvSGVpZ2h0KTtcbiAgY29uc3QgbGVmdCA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdmlkZW9XaWR0aCAvIDIsIHZpZGVvSGVpZ2h0KTtcbiAgY29uc3QgcmlnaHQgPSBjdHguZ2V0SW1hZ2VEYXRhKFxuICAgIHZpZGVvV2lkdGggLyAyLFxuICAgIDAsXG4gICAgdmlkZW9XaWR0aCAvIDIsXG4gICAgdmlkZW9IZWlnaHRcbiAgKTtcbiAgdmlld0N0eC5wdXRJbWFnZURhdGEocmlnaHQsIGNhbnZhcy53aWR0aCAvIDIgKyByYXRpbywgcmF0aW8pO1xuICB2aWV3Q3R4LnB1dEltYWdlRGF0YShsZWZ0LCByYXRpbywgcmF0aW8pO1xuXG4gIGN0eC5tb3ZlVG8odmlkZW9XaWR0aCAvIDIsIDApO1xuICBjdHgubGluZVRvKHZpZGVvV2lkdGggLyAyLCAwKTtcbiAgY3R4LmxpbmVUbyh2aWRlb1dpZHRoIC8gMiwgdmlkZW9IZWlnaHQpO1xuXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PlxuICAgIHJlbmRlcih2aWRlbywgdmlkZW9XaWR0aCwgdmlkZW9IZWlnaHQsIHJhdGlvLCBjb3ZlcmVkQ29sb3IpXG4gICk7XG59XG4iXSwibmFtZXMiOlsiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInZpZXciLCJjdHgiLCJnZXRDb250ZXh0Iiwid2lsbFJlYWRGcmVxdWVudGx5Iiwidmlld0N0eCIsInZpZGVvIiwidmlld3B0IiwiYmVnaW5QYXRoIiwib25sb2FkZWRkYXRhIiwid2luZG93IiwiYXV0b3BsYXkiLCJibGFjayIsInJhdGlvIiwid2lkdGgiLCJoZWlnaHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmaWxsUmVjdCIsInN0cmVhbSIsImNhcHR1cmVTdHJlYW0iLCJtYWtlVmlkZW8iLCJjcmVhdGVFbGVtZW50Iiwic3JjT2JqZWN0Iiwic2V0QXR0cmlidXRlIiwicmVuZGVyIiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwiY292ZXJlZENvbG9yIiwiZHJhd0ltYWdlIiwibGVmdCIsImdldEltYWdlRGF0YSIsInJpZ2h0IiwicHV0SW1hZ2VEYXRhIiwibW92ZVRvIiwibGluZVRvIl0sInNvdXJjZVJvb3QiOiIifQ==