/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ (function() {

var __read = this && this.__read || function (o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
    r,
    ar = [],
    e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
};
var __spreadArray = this && this.__spreadArray || function (to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
};
var canvas = document.getElementById("canvas");
// const double = document.getElementById("double") as HTMLdoubleElement;
var ctx = canvas.getContext("2d", {
  willReadFrequently: true
});
// ctx.scale(0.5, 0.5);
var video = document.getElementById("video");
var viewpt = document.getElementById("viewpt");
viewpt.onloadeddata = function () {
  window.viewpt = viewpt;
  viewpt.autoplay = true;
};
video.onloadeddata = function () {
  var black = [122, 122, 122, 255];
  var ratio = 100;
  var width = 1024;
  var height = 500;
  render(video, width, height, ratio, black);
  canvas.width = width + ratio * 4;
  canvas.height = height + ratio * 4;
  var stream = canvas.captureStream(60);
  var makeVideo = document.createElement("video");
  makeVideo.srcObject = stream;
  makeVideo.autoplay = true;
  makeVideo.setAttribute("id", "maked-video");
  // document.body.appendChild(makeVideo);
};

function findFrontPosition() {}
function findBackPosition() {}
function render(video, width, height, ratio, coveredColor) {
  console.time();
  ctx.drawImage(video, 0, 0, width, height);
  var _a = __read(coveredColor, 4),
    red = _a[0],
    green = _a[1],
    blue = _a[2],
    alpha = _a[3];
  var widthNumbers = width * height * 4 / height;
  var sideRatio = ratio * 16;
  var rowRatio = widthNumbers + sideRatio;
  var array = new Array(rowRatio * ratio).fill(0);
  var totalData = ctx.getImageData(0, 0, width, height).data;
  var data = [];
  for (var i = 0; i < totalData.length; i++) {
    data[i] = totalData[i];
  }
  var fixedData = [];
  for (var i = 0; i < ratio; i += 1) {
    fixedData.push(red);
    fixedData.push(green);
    fixedData.push(blue);
    fixedData.push(alpha);
  }
  // console.time("좌우 영상");
  for (var i = 0; i < data.length - 1; i += widthNumbers) {
    data.splice(i, 1, __spreadArray(__spreadArray([], __read(fixedData), false), [data[i]], false));
    data.splice(i + widthNumbers - 1, 1, __spreadArray([data[i + widthNumbers - 1]], __read(fixedData), false));
    data.splice(i + widthNumbers / 2, 1, __spreadArray(__spreadArray(__spreadArray([], __read(fixedData), false), __read(fixedData), false), [data[i + widthNumbers / 2]], false));
  }
  // console.timeEnd("좌우 영상");
  var createdUint8Array = [];
  // console.time("이중 배열");
  for (var i = 0; i < data.length; i++) {
    if (typeof data[i] === "object") {
      for (var j = 0; j < data[i].length; j++) {
        createdUint8Array.push(data[i][j]);
      }
      continue;
    }
    createdUint8Array.push(data[i]);
  }
  // console.timeEnd("이중 배열");
  for (var i = 0; i < array.length - 3; i += 4) {
    array[i] = red;
    array[i + 1] = green;
    array[i + 2] = blue;
    array[i + 3] = alpha;
  }
  // console.time("최종 병합");
  // const testing = [...array, ...createdUint8Array, ...array];
  var testing = [];
  for (var i = 0; i < array.length; i++) {
    testing[i] = array[i];
  }
  for (var i = 0; i < createdUint8Array.length; i++) {
    testing[testing.length] = createdUint8Array[i];
  }
  for (var i = 0; i < array.length; i++) {
    testing[testing.length] = array[i];
  }
  // console.timeEnd("최종 병합");
  var arr = new Uint8ClampedArray(testing);
  var imageData = new ImageData(arr, width + ratio * 4, height + ratio * 2);
  ctx.putImageData(imageData, 0, 0);
  console.timeEnd();
  setTimeout(function () {
    render(video, width, height, ratio, coveredColor);
  }, 1000 / 30);
}

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[0]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,